(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{364:function(t,e,r){"use strict";r.r(e);var a=r(41),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"inversifyjs-binding-decorators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#inversifyjs-binding-decorators","aria-hidden":"true"}},[t._v("#")]),t._v(" inversifyjs-binding-decorators")]),t._v(" "),r("h2",{attrs:{id:"简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),r("p",[t._v("在本示例中，因为"),r("code",[t._v("inversifyjs-binding-decorators")]),t._v("的使用，所有的可注入实体都使用了"),r("code",[t._v("@provide(TYPE)")]),t._v("进行装饰，而非"),r("code",[t._v("@injectable()")]),t._v("。")]),t._v(" "),r("p",[t._v("在"),r("code",[t._v("utils/mongodb")]),t._v("文件夹中的是一个叫做"),r("code",[t._v("client.ts")]),t._v("的类。这个类是用于增、删、改、查操作的封装。它并未替代所有MongoDB操作。")]),t._v(" "),r("p",[t._v("有一个情况：在测试期间，MongoDB的客户端会被mock类取代。这样做的原因是，当我们测试(使用了Inversify控制器的)路由时，我们仅仅是想测试路由的可行性，而非测试MongoDB客户端是否成功地在数据库中写入了什么。若要测试客户端，我们还有另一个专门的测试。")]),t._v(" "),r("h2",{attrs:{id:"使用的中间件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用的中间件","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用的中间件")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("中间件")]),t._v(" "),r("th",[t._v("原因")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("a",{attrs:{href:"https://github.com/expressjs/body-parser",target:"_blank",rel:"noopener noreferrer"}},[t._v("body-parser"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("我们需要查看请求体内容")])]),t._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://github.com/helmetjs/helmet",target:"_blank",rel:"noopener noreferrer"}},[t._v("helmet"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("为应用添加一些保护，并移除诸如"),r("code",[t._v("X-Powered-By")]),t._v("等请求头")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);